#ifndef CELLICCCORRIASBUIST2008_HPP_
#define CELLICCCORRIASBUIST2008_HPP_

//! @file
//!
//! This source file was generated from CellML.
//!
//! Model: ICC_model
//!
//! Processed by pycml - CellML Tools in Python
//!     (translators: 16469, pycml: 16306, optimize: 14997)
//! on Fri Feb 15 10:51:12 2013
//!
//! <autogenerated>

#include "ChasteSerialization.hpp"
#include <boost/serialization/base_object.hpp>
#include "AbstractCardiacCell.hpp"
#include "AbstractStimulusFunction.hpp"

class CellICCBioPhy : public AbstractCardiacCell
{
    friend class boost::serialization::access;
    template<class Archive>
    void serialize(Archive & archive, const unsigned int version)
    {
        archive & boost::serialization::base_object<AbstractCardiacCell >(*this);
    }

    //
    // Settable parameters and readable variables
    //
    double var_ICC_Membrane__Cm;
    double var_chaste_interface__i_ionic;
    double var_chaste_interface__ICC_Membrane__Ca_i;

public:
    double Get_ICC_Membrane__Cm();
    double Get_chaste_interface__i_ionic();
    double GetIntracellularCalciumConcentration();
    CellICCBioPhy(boost::shared_ptr<AbstractIvpOdeSolver> pSolver, boost::shared_ptr<AbstractStimulusFunction> pIntracellularStimulus);
    ~CellICCBioPhy();
    void VerifyStateVariables();
    double GetIIonic(const std::vector<double>* pStateVariables=NULL);
    void EvaluateYDerivatives(double var_chaste_interface__Time__time, const std::vector<double>& rY, std::vector<double>& rDY);
};


// Needs to be included last
#include "SerializationExportWrapper.hpp"
CHASTE_CLASS_EXPORT(CellICCBioPhy)

namespace boost
{
    namespace serialization
    {
        template<class Archive>
        inline void save_construct_data(
            Archive & ar, const CellICCBioPhy* t, const unsigned int fileVersion)
        {
            const boost::shared_ptr<AbstractIvpOdeSolver> p_solver = t->GetSolver();
            const boost::shared_ptr<AbstractStimulusFunction> p_stimulus = t->GetStimulusFunction();
            ar << p_solver;
            ar << p_stimulus;
        }

        template<class Archive>
        inline void load_construct_data(
            Archive & ar, CellICCBioPhy* t, const unsigned int fileVersion)
        {
            boost::shared_ptr<AbstractIvpOdeSolver> p_solver;
            boost::shared_ptr<AbstractStimulusFunction> p_stimulus;
            ar >> p_solver;
            ar >> p_stimulus;
            ::new(t)CellICCBioPhy(p_solver, p_stimulus);
        }

    }

}

#endif // CELLICCCORRIASBUIST2008FROMCELLML_HPP_
